---
description: Kubernetes
globs: infra/k8s/*
alwaysApply: false
---
 globs: k8s/
alwaysApply: false
---
Description: Kubernetes 매니페스트 작성 및 관리 규칙
Globs: .yaml

---
# Kubernetes 작성 규칙

## 일반 규칙
- 모든 리소스에 적절한 라벨(`labels`)과 주석(`annotations`)을 추가하세요.
- 네임스페이스를 명시적으로 지정하세요. (예: `namespace: news-platform`)
- 리소스 이름은 의미 있게 작성하고 일관된 명명 규칙을 사용하세요.
- YAML 들여쓰기는 2칸을 사용하세요.
- 모든 설정 파일에 주석을 통해 목적과 사용법을 설명하세요.

## 워크로드 리소스(Deployment, StatefulSet, DaemonSet)
- 항상 `resources` 요청 및 제한을 설정하세요. (CPU, 메모리)
- 적절한 `readinessProbe`와 `livenessProbe`를 구성하세요.
- 컨테이너 이미지는 명시적인 태그를 사용하고, `latest` 태그 사용을 피하세요.
- Pod 중단 예산(PodDisruptionBudget)을 설정하여 가용성을 유지하세요.
- `securityContext`를 설정하여 최소 권한 원칙을 적용하세요.
- 환경 변수는 ConfigMap이나 Secret을 참조하세요.

## 네트워킹
- 서비스 이름은 기능을 명확히 나타내야 합니다.
- 적절한 서비스 유형(`ClusterIP`, `NodePort`, `LoadBalancer`)을 선택하세요.
- Ingress 리소스에는 TLS 설정을 포함하세요.
- 네트워크 정책을 사용하여 포드 간 통신을 제한하세요.

## StatefulSet 구성
- 데이터 지속성이 필요한 애플리케이션은 StatefulSet으로 배포하세요.
- 안정적인 스토리지를 위해 적절한 StorageClass를 선택하세요.
- `volumeClaimTemplates`를 사용하여 각 복제본에 독립적인 PVC를 할당하세요.
- 업데이트 전략은 일반적으로 `RollingUpdate`를 사용하되, 데이터베이스와 같은 경우 `OnDelete`를 고려하세요.

## ConfigMap 및 Secret
- 환경별 설정은 ConfigMap으로 분리하세요.
- 민감한 정보는 Secret에 저장하고, 필요한 경우 암호화하세요.
- 큰 설정 파일은 볼륨으로 마운트하고, 작은 값은 환경 변수로 사용하세요.

## 헬스 체크 및 모니터링
- 모든 포드에 적절한 `readinessProbe`와 `livenessProbe`를 구성하세요.
- Prometheus 주석을 사용하여 메트릭 수집을 허용하세요.
- 로깅 사이드카 컨테이너를 추가하여 로그 관리를 개선하세요.

## 보안
- Pod Security Policies 또는 Pod Security Standards를 적용하세요.
- RBAC 규칙을 사용하여 권한을 최소화하세요.
- 컨테이너는 루트가 아닌 사용자로 실행하세요.
- 이미지 취약점 스캔을 CI/CD 파이프라인에 통합하세요.

## 리소스 관리
- 명시적인 리소스 제한과 요청을 설정하세요.
- HorizontalPodAutoscaler를 사용하여 워크로드를 자동으로 확장하세요.
- ResourceQuota와 LimitRange를 사용하여 네임스페이스 리소스 사용을 제한하세요.





