---
description:  docker
globs: docker/
alwaysApply: false
---
Description: Docker 파일 작성 및 관리 규칙
Globs: Dockerfile, *.Dockerfile, docker-compose*.yml
---
# Docker 작성 규칙

## Dockerfile 작성 규칙
- 베이스 이미지는 항상 명시적인 태그를 사용하세요 (예: `python:3.11-slim`).
- 멀티스테이지 빌드를 사용하여 최종 이미지 크기를 최소화하세요.
- `RUN` 명령어는 가능한 체이닝하고 캐시 레이어를 최적화하세요.
- 종속성 설치 후 패키지 캐시를 정리하세요 (예: `apt-get clean`, `rm -rf /var/lib/apt/lists/*`).
- 환경 변수는 `ENV` 를 사용하여 일관되게 설정하세요.
- 보안 취약점을 줄이기 위해 가능한 최소 권한의 사용자를 사용하세요.
- `COPY` 명령어를 사용하여 파일을 복사할 때는 명확한 출처와 대상을 지정하세요.
- 컨테이너 내 어플리케이션 로깅을 위해 `PYTHONUNBUFFERED=1`을 설정하세요.
- `EXPOSE` 명령어로 컨테이너가 사용하는 포트를 명시하세요.
- 각 Dockerfile에는 주석을 통해 이미지의 목적을 설명하세요.

## docker-compose.yml 작성 규칙
- 서비스 이름은 의미 있게 작성하세요.
- 각 서비스에 명시적인 restart 정책을 설정하세요 (예: `restart: always` 또는 `restart: unless-stopped`).
- 볼륨 이름은 명확하게 지정하고 용도를 주석으로 설명하세요.
- 환경 변수는 `.env` 파일이나 `environment` 섹션에서 관리하세요.
- 네트워크 설정은 명시적으로 정의하고 서비스 간 통신 흐름을 고려하세요.
- 컨테이너 간 의존성은 `depends_on`으로 정의하세요.
- 헬스체크를 통해 서비스 가용성을 모니터링하세요.

## 이미지 빌드 및 배포 규칙
- 태그 이름은 의미 있게 작성하고 버전 정보를 포함하세요.
- CI/CD 파이프라인에서 이미지를 빌드할 때는 캐시를 활용하세요.
- 프로덕션용 이미지는 보안 스캔을 거쳐야 합니다.
- 배포 전 이미지 크기를 최적화하세요.

[collector.Dockerfile](mdc:docker/collector.Dockerfile)
[text-processor.Dockerfile](mdc:docker/text-processor.Dockerfile)
[sentiment-processor.Dockerfile](mdc:docker/sentiment-processor.Dockerfile)
[docker-compose.yml](mdc:docker-compose.yml)