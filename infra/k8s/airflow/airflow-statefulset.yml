apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: airflow-webserver
  namespace: news-platform
  labels:
    app: airflow
    component: webserver
spec:
  serviceName: "airflow-webserver"
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: webserver
  template:
    metadata:
      labels:
        app: airflow
        component: webserver
    spec:
      securityContext:
        fsGroup: 0
      serviceAccountName: airflow
      containers:
      - name: airflow-webserver
        image: apache/airflow:2.10.5-python3.11
        imagePullPolicy: IfNotPresent
        command: ["airflow", "webserver"]
        ports:
        - containerPort: 8081
          name: web
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        envFrom:
        - configMapRef:
            name: airflow-config
        volumeMounts:
        - name: dags
          mountPath: /opt/airflow/dags
        - name: logs
          mountPath: /opt/airflow/logs
        - name: plugins
          mountPath: /opt/airflow/plugins
        - name: config
          mountPath: /opt/airflow/config
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 20
      volumes:
      - name: dags
        persistentVolumeClaim:
          claimName: airflow-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: airflow-logs-pvc
      - name: plugins
        persistentVolumeClaim:
          claimName: airflow-plugins-pvc
      - name: config
        persistentVolumeClaim:
          claimName: airflow-config-pvc
  volumeClaimTemplates:
    - metadata:
        name: airflow-dags
      spec:
        accessModes: [ "ReadWriteMany" ]
        storageClassName: nfs-client
        resources:
          requests:
            storage: 1Gi
        persistentVolumeClaim:
          claimName: airflow-pvc
    - metadata:
        name: airflow-logs
      spec:
        accessModes: [ "ReadWriteMany" ]
        storageClassName: nfs-client
        resources:
          requests:
            storage: 1Gi
        persistentVolumeClaim:
          claimName: airflow-logs-pvc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: airflow-scheduler
  namespace: news-platform
  labels:
    app: airflow
    component: scheduler
spec:
  serviceName: "airflow-scheduler"
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: scheduler
  template:
    metadata:
      labels:
        app: airflow
        component: scheduler
    spec:
      securityContext:
        fsGroup: 0
      serviceAccountName: airflow
      containers:
      - name: airflow-scheduler
        image: apache/airflow:2.10.5-python3.11
        imagePullPolicy: IfNotPresent
        command: ["airflow", "scheduler"]
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        envFrom:
        - configMapRef:
            name: airflow-config
        volumeMounts:
        - name: dags
          mountPath: /opt/airflow/dags
        - name: logs
          mountPath: /opt/airflow/logs
        - name: plugins
          mountPath: /opt/airflow/plugins
        - name: config
          mountPath: /opt/airflow/config
        readinessProbe:
          exec:
            command:
            - "/bin/bash"
            - "-c"
            - "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - "/bin/bash"
            - "-c"
            - "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"
          initialDelaySeconds: 60
          periodSeconds: 20
      volumes:
      - name: dags
        persistentVolumeClaim:
          claimName: airflow-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: airflow-logs-pvc
      - name: plugins
        persistentVolumeClaim:
          claimName: airflow-plugins-pvc
      - name: config
        persistentVolumeClaim:
          claimName: airflow-config-pvc 